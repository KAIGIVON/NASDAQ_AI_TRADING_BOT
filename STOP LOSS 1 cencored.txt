//@version=5
indicator("סטופ לוס לשימוש מתחת ל-VWAP הגדרת AVERAGE 2.0", overlay=true)

// ========== VWAP STDEV BANDS ==========
devUp1 = input(*****************, title="Stdev above (1)")
devDn1 = input(*****************, title="Stdev below (1)")
devUp2 = input(*****************, title="Stdev above (2)")
devDn2 = input(*****************, title="Stdev below (2)")
devUp3 = input(*****************, title="Stdev above (3)")
devDn3 = input(*****************, title="Stdev below (3)")
devUp4 = input(*****************, title="Stdev above (4)")
devDn4 = input(*****************, title="Stdev below (4)")
devUp5 = input(*****************, title="Stdev above (5)")
devDn5 = input(*****************, title="Stdev below (5)")
showDv2 = input(*****************, title="Show second group of bands?")
showDv3 = input(*****************, title="Show third group of bands?")
showDv4 = input(*****************, title="Show fourth group of bands?")
showDv5 = input(*****************, title="Show fifth group of bands?")

// ========== VWAP FILTER (MANUAL SESSION-BASED CALCULATION) ==========
newSession = *****************
vwapsum = *****************
volumesum = *****************
v2sum = *****************

vwapsum := ***************************************************************
volumesum := *************************************************************
v2sum := *****************************************************************

vwap = *****************
stdev = ************************************************************
vwap_lower = ******************************************************

// ========== SETTINGS ==========
length = input(*****************, 'ATR Length')
minMult = input.int(*****************, 'Factor Range', minval = 0, inline = 'factor')
maxMult = input.int(*****************, '', minval = 0, inline = 'factor')
step = input.float(*****************, 'Step', minval = 0, step = 0.1)
perfAlpha = input.float(*****************, 'Performance Memory', minval = 2)
fromCluster = input.string(*****************, 'From Cluster', options = ['Best', 'Average', 'Worst'])
maxIter = input.int(*****************, 'Maximum Iteration Steps', minval = 0, group = 'Optimization')
maxData = input.int(*****************, 'Historical Bars Calculation', minval = 0, group = 'Optimization')

bearCss = input(color.new(*****************), 'Trailing Stop', inline = 'ts', group = 'Style')
bullCss = input(color.rgb(*****************), '', inline = 'ts', group = 'Style')
amaBearCss = input(color.new(*****************), 'AMA', inline = 'ama', group = 'Style')
amaBullCss = input(color.new(*****************), '', inline = 'ama', group = 'Style')
showGradient = input(*****************, 'Candle Coloring', group = 'Style')
showSignals = input(*****************, 'Show Signals', group = 'Style')

// ========== TYPES ==========
type supertrend
    float upper = *****************
    float lower = *****************
    float output
    float perf = *****************
    float factor
    int trend = *****************

type vector
    array<float> out

// ========== *********** ENGINE ==========
var holder = *****.******<********>(0)
var factors = **.****<float>(0)
if ******.isfirst
    for i = 0 to int((***************** - *****************) / *****************)
        factors.push(*****************)
        *****.push(************.new())

atr = ta.atr(*****************)
k = 0
for factor in factors
    get_spt = holder.get(k)
    up = *****************
    dn = *****************
    get_spt.trend := *****************
    get_spt.upper := *****************
    get_spt.lower := *****************
    diff = *****************
    get_spt.perf += *****************
    get_spt.output := *****************
    get_spt.factor := *****************
    k += 1

// ========== CLUSTERING ==========
factor_array = array.new<float>(0)
data = array.new<float>(0)
if *****************
    for element in holder
        data.push(*****************)
        factor_array.push(*****************)

centroids = array.new<float>(0)
centroids.push(*****************)
centroids.push(*****************)
centroids.push(*****************)

var array<vector> factors_clusters = na
var array<vector> perfclusters = na
if *****************
    for _ = 0 to *****************
        factors_clusters := ******.from(*****************)
        perfclusters := *******.from(*****************)
        i = 0
        for value in data
            dist = array.new<float>(0)
            for ********** in ***********
                dist.push(*****************)
            idx = *****************
            perfclusters.get(idx).out.push(*****************)
            factors_clusters.get(idx).out.push(*****************)
            i += 1
        new_centroids = array.new<float>(0)
        for cluster_ in perfclusters
            new_centroids.push(*****************)
        if *****************
            break
        centroids := new_centroids

// ========== SIGNALS & AMA ==========
var float ************* = ****
var float ********** = ****
var float *********** = *****

var from = switch fromCluster
    'Best' => *****************
    'Average' => *****************
    'Worst' => *****************

den = ta.ema(*****************, int(perfAlpha))
if not na(perfclusters)
    target_factor := *****************
    perf_idx := *****************

var upper = *****************
var lower = *****************
var os = *****************
up = *****************
dn = *****************
upper := *****************
lower := *****************
os := *****************

// ========== תנאי LONG SIGNAL לפי קוד NASDAQ KING ==========
longSignal = *****************************************************

// ===== רצועות VWAP =====
vwapd1 = *****************
vwapd2 = *****************
vwapd3 = *****************
vwapd4 = *****************
vwapd5 = *****************

var float trailingStop = na
var int currentZone = na
var bool inLong = false

// ===== התחלה תמידית מהשכבה החמישית =====
isNewLongSignal = *****************************************************

if isNewLongSignal
    inLong := *****************
    trailingStop := *****************
    currentZone := *****************

// ===== יציאה מהלונג =====
exitCondition = *****************************************************
if exitCondition
    inLong := *****************
    trailingStop := *****************
    currentZone := *****************

// ===== ניהול trailing stop =====
if inLong and not na(trailingStop)
    if currentZone > 0 and close > (currentZone == 1 ? ***************** : currentZone == 2 ? ***************** : currentZone == 3 ? ***************** : *****************)
        currentZone := *****************
        trailingStop := currentZone == 0 ? ***************** : currentZone == 1 ? ***************** : currentZone == 2 ? ***************** : *****************

// ===== ציור =====
plot(*****************)
plot(*****************)
plot(*****************)
plot(*****************)
plot(*****************)
plot(*****************)
plot(trailingStop, title="Trailing Stop", color=color.red, linewidth=2)

// ===== איתותים =====
plotshape(*****************)
plotshape(*****************)

// ===== התראות על סטופ =====
var float prevStop = na
isNewStop = *****************************************************
isTrailingUp = *****************************************************

alertcondition(*****************************************************)

if (isNewStop or isTrailingUp)
    prevStop := trailingStop

// ===== לייבל ייעודי להצגת הסטופ =====
label.new(*****************)
plot(trailingStop, title="Trailing Stop Export", display=display.none)
